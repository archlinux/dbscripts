#!/hint/bash

if [[ -n ${GITUSER} ]]; then
	setfacl -m u:"${GITUSER}":rwx "${WORKDIR}"
	setfacl -m d:u:"${USER}":rwx "${WORKDIR}"
	setfacl -m d:u:"${GITUSER}":rwx "${WORKDIR}"
fi

# unset any behavior influencing environment variables
# https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables
while read -r var; do
	unset "${var}";
done < <(env | grep -E '^GIT' | awk -F= '{print $1}')
unset PREFIX
unset EMAIL


# Converts from the PKGBUILD tag to the git repository tag
# Input     1:1.0~0-1
# Output    1-1.0.0-1
conv_tag() {
	local git_tag="$1"
	git_tag="${git_tag/:/-}"
	git_tag="${git_tag//\~/.}"
	printf "%s" "${git_tag}"
}

arch_git() {
	if [[ -z ${GITUSER} ]]; then
		/usr/bin/git "${@}"
	else
		sudo -u "${GITUSER}" -- /usr/bin/git "${@}"
	fi
}


# Fetch the package sources into a global cache
fetch_pkgbuild() {
	local pkgbase="${1}"
	local src="${GITREPOS}/${pkgbase}.git"
	local target="${GITPKGREPOS}/${pkgbase}"
	if [[ ! -d $target ]]; then
		if ! arch_git -c core.sharedRepository=group clone --origin origin --bare --mirror "${src}" "${target}"; then
			return 1
		fi
		return 0
	fi
	if ! arch_git -C "${target}" fetch --prune --prune-tags; then
		return 1
	fi
	return 0
}


# Source the PKGBUILD from the package's git/svn/whatever repo.
source_pkgbuild() {
	local pkgbase="$1"
	local tag=$(conv_tag ${2})

	. <(arch_git -C "${GITPKGREPOS}/${pkgbase}" show "${tag}":PKGBUILD 2>/dev/null || echo false)
}

# Export PKGBUILD resource following the same rules as source_pkgbuild()
export_from_vcs() {
	local pkgbase="$1"
	local tag=$(conv_tag ${2})
	local dest="$3"
	
	if [[ ! -e ${dest} ]]; then
		mkdir -p "${dest}"
		arch_git -C "${GITPKGREPOS}/${pkgbase}" archive "$tag" | bsdtar -xf - -C "${dest}"
	fi
}

# Which repo is this package in?
find_repo_for_package() {
	local pkgbase=${1}
	local pkgarch=${2}
	local candidates=("${@:3}")

	local repos=($(arch_git -C "${GITREPO}" ls-files "*/$pkgbase" | awk -F/ '{print $1}' | \
		grep -xFf <(printf "%s\n" "${candidates[@]/%/-${pkgarch}}" "${candidates[@]/%/-any}")))

	if (( ${#repos[@]} > 1 )); then
		die "%s is present in multiple repos (%s)" "${pkgbase}" "${repos[*]}"
	fi
	(( ${#repos[@]} == 1 )) || return $?

	printf '%s\n' "${repos[@]%/}"
}

# Get the current pkgver from a given repo
pkgver_from_state_repo() {
	local pkgbase=${1}
	local repo=${2}
	awk '{print $2}' "${GITREPO}/${repo}/${pkgbase}" 2>/dev/null || return 1
}

# Commit changes staged by (successive?) vcs_(re)?move_package runs.
vcs_commit() {
	local commit_message=$1
	local username author name email

	if ! username=$(/usr/bin/id -un); then
		die "Failed to get username from 'id'"
	fi
	if ! author=$(grep -E " ${username}\$" "${AUTHORS}"); then
		die "Missing author information for %s in '%s'" "${username}" "${AUTHORS}"
	fi
	if ! name=$(echo "${author}"|sed -E 's/(.+) (<.+>) .+/\1/'); then
		die "Failed to extract name from author line"
	fi
	if ! email=$(echo "${author}"|sed -E 's/(.+) (<.+>) .+/\2/'); then
		die "Failed to extract email from author line"
	fi

	arch_git -c user.name="${name}" -c user.email="${email}" -C "${GITREPO}" commit -m "${commit_message}"
}


vcs_update_package() {
	local pkgbase="$1"
	local tag="${2}"
	local gittag="$(conv_tag ${2})"
	local dest="$3"

	mkdir -p "${GITREPO}/${dest}"
	echo "${pkgbase} ${gittag} $(git -C "${GITPKGREPOS}/${pkgbase}" rev-parse "${gittag}")" > "${GITREPO}/${dest}/${pkgbase}"
	arch_git -C "${GITREPO}" add "${GITREPO}/${dest}/${pkgbase}"
	vcs_commit "updated ${pkgbase}-${tag} in [${dest}]"
}

# Write to the VCS in order to track a package moving between different pacman
# repositories.
vcs_move_package() {
	local pkgbase=${1}
	local vcsrepo_from=${2}
	local vcsrepo_to=${3}

	mkdir -p "${GITREPO}/${vcsrepo_to}"
	arch_git -C "${GITREPO}" mv --force "${vcsrepo_from}/${pkgbase}" "${vcsrepo_to}/${pkgbase}"
}

# Write to the VCS in order to track a package being deleted from a pacman
# repository.
vcs_remove_package() {
	local pkgbase=${1}
	local vcsrepo=${2}

	arch_git -C "${GITREPO}" rm "${vcsrepo}/${pkgbase}"
	vcs_commit "${0##*/}: remove ${pkgbase} from ${vcsrepo}"
}
